# PowerShell script to convert .env to YAML format
param(
    [Parameter(Mandatory=$true)]
    [string]$InputFile,
    
    [Parameter(Mandatory=$false)]
    [string]$OutputFile = "config.yaml",
    
    [Parameter(Mandatory=$false)]
    [switch]$Nested = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$Sort = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$NoHeader = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$Preview = $false
)

# Check if input file exists
if (!(Test-Path $InputFile)) {
    Write-Error "Input file '$InputFile' not found"
    exit 1
}

# Function to convert .env to YAML format
function Convert-EnvToYaml {
    param(
        [string]$EnvFile,
        [string]$YamlFile,
        [bool]$UseNested = $false,
        [bool]$SortKeys = $false,
        [bool]$SkipHeader = $false
    )
    
    try {
        # Read the .env file
        $content = Get-Content $EnvFile -Raw
        
        # Initialize variables
        $envVars = @{}
        $variableCount = 0
        
        # Parse .env file line by line
        $lines = $content -split "`n"
        
        foreach ($line in $lines) {
            $trimmedLine = $line.Trim()
            
            # Skip empty lines and comments
            if ($trimmedLine -eq "" -or $trimmedLine.StartsWith("#")) {
                continue
            }
            
            # Parse KEY=VALUE format
            $equalIndex = $trimmedLine.IndexOf("=")
            if ($equalIndex -eq -1) {
                Write-Warning "Invalid format (no '=' found): $line"
                continue
            }
            
            $key = $trimmedLine.Substring(0, $equalIndex).Trim()
            $value = $trimmedLine.Substring($equalIndex + 1).Trim()
            
            if ($key -eq "") {
                Write-Warning "Empty key: $line"
                continue
            }
            
            # Handle quoted values
            $value = Parse-EnvValue $value
            
            # Handle nested structure if requested
            if ($UseNested -and $key.Contains("_")) {
                Set-NestedValue $envVars $key $value
            } else {
                $envVars[$key] = $value
            }
            
            $variableCount++
        }
        
        # Generate YAML content
        $yamlContent = ""
        
        # Add header comment if requested
        if (-not $SkipHeader) {
            $timestamp = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            $yamlContent += "# Generated from $EnvFile on $timestamp`n"
            $yamlContent += "# Auto-generated by convert-env-to-yaml.ps1`n`n"
        }
        
        # Convert to YAML format
        $yamlData = Convert-ToYaml $envVars $SortKeys
        $yamlContent += $yamlData
        
        # Write to YAML file
        $yamlContent | Out-File -FilePath $YamlFile -Encoding UTF8
        
        Write-Host "‚úÖ Successfully converted $EnvFile to $YamlFile" -ForegroundColor Green
        Write-Host "üìä Generated $variableCount environment variables" -ForegroundColor Cyan
        
        if ($Preview) {
            Write-Host "üìÑ Preview of generated YAML content:" -ForegroundColor Cyan
            Write-Host $yamlContent
        }
        
        return @{ success = $true; variableCount = $variableCount; outputFile = $YamlFile }
        
    } catch {
        Write-Error "‚ùå Error converting .env to YAML: $($_.Exception.Message)"
        return @{ success = $false; error = $_.Exception.Message }
    }
}

# Function to parse environment variable value
function Parse-EnvValue {
    param([string]$value)
    
    # Handle quoted strings
    if (($value.StartsWith('"') -and $value.EndsWith('"')) -or 
        ($value.StartsWith("'") -and $value.EndsWith("'"))) {
        return $value.Substring(1, $value.Length - 2)
    }
    
    # Convert boolean strings to actual booleans
    if ($value.ToLower() -eq "true") { return $true }
    if ($value.ToLower() -eq "false") { return $false }
    
    # Convert numeric strings to numbers
    if ($value -match "^\d+$") {
        return [int]$value
    }
    if ($value -match "^\d+\.\d+$") {
        return [double]$value
    }
    
    return $value
}

# Function to set nested value in hashtable
function Set-NestedValue {
    param(
        [hashtable]$obj,
        [string]$key,
        $value
    )
    
    $parts = $key.ToLower() -split "_"
    $current = $obj
    
    for ($i = 0; $i -lt ($parts.Length - 1); $i++) {
        $part = $parts[$i]
        if (-not $current.ContainsKey($part)) {
            $current[$part] = @{}
        }
        $current = $current[$part]
    }
    
    $current[$parts[$parts.Length - 1]] = $value
}

# Function to convert hashtable to YAML format
function Convert-ToYaml {
    param(
        [hashtable]$obj,
        [bool]$sortKeys = $false,
        [int]$indent = 0
    )
    
    $yaml = ""
    $indentStr = "  " * $indent
    
    $keys = if ($sortKeys) { $obj.Keys | Sort-Object } else { $obj.Keys }
    
    foreach ($key in $keys) {
        $value = $obj[$key]
        
        if ($value -is [hashtable]) {
            $yaml += "$indentStr$key:`n"
            $yaml += Convert-ToYaml $value $sortKeys ($indent + 1)
        } else {
            $formattedValue = Format-YamlValue $value
            $yaml += "$indentStr$key`: $formattedValue`n"
        }
    }
    
    return $yaml
}

# Function to format YAML values
function Format-YamlValue {
    param($value)
    
    if ($value -is [string]) {
        # Quote strings that contain special characters or spaces
        if ($value -match "[\s#:]" -or $value -eq "") {
            return "`"$value`""
        }
        return $value
    } elseif ($value -is [bool]) {
        return $value.ToString().ToLower()
    } else {
        return $value.ToString()
    }
}

# Show help if requested
if ($args -contains "--help" -or $args -contains "-h") {
    Write-Host @"
üîß .env to YAML Converter Tool (PowerShell)

Usage: .\convert-env-to-yaml.ps1 -InputFile <input-env-file> [-OutputFile <output-yaml-file>] [options]

Parameters:
  -InputFile          Input .env file (required)
  -OutputFile         Output YAML file (default: config.yaml)
  -Nested             Convert underscore-separated keys to nested objects
  -Sort               Sort keys alphabetically in output
  -NoHeader           Skip adding header comments
  -Preview            Preview the generated YAML content

Examples:
  .\convert-env-to-yaml.ps1 -InputFile .env -OutputFile config.yaml
  .\convert-env-to-yaml.ps1 -InputFile .env -OutputFile config.yaml -Preview
  .\convert-env-to-yaml.ps1 -InputFile .env -OutputFile config.yaml -Nested -Sort
"@
    exit 0
}

# Convert the file
$result = Convert-EnvToYaml -EnvFile $InputFile -YamlFile $OutputFile -UseNested $Nested -SortKeys $Sort -SkipHeader $NoHeader

if (-not $result.success) {
    exit 1
}