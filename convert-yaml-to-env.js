const fs = require('fs');
const yaml = require('js-yaml');
const path = require('path');

/**
 * Convert YAML secrets file to .env format
 * Supports both Kubernetes-style env arrays and regular YAML key-value pairs
 */
function convertYamlToEnv(inputFile, outputFile) {
    try {
        // Read the YAML file
        const fileContent = fs.readFileSync(inputFile, 'utf8');
        
        // Parse YAML
        const yamlData = yaml.load(fileContent);
        
        let envContent = '';
        let variableCount = 0;
        
        // Add header comment
        envContent += `# Generated from ${inputFile} on ${new Date().toISOString()}\n`;
        envContent += `# Auto-generated by convert-yaml-to-env.js\n\n`;
        
        // Handle Kubernetes-style env array format
        if (yamlData && yamlData.env && Array.isArray(yamlData.env)) {
            yamlData.env.forEach(envVar => {
                if (envVar.name && envVar.value !== undefined) {
                    // Handle values that might need quotes
                    let value = envVar.value;
                    if (typeof value === 'string' && (value.includes(' ') || value.includes('#'))) {
                        value = `"${value}"`;
                    }
                    envContent += `${envVar.name}=${value}\n`;
                    variableCount++;
                }
            });
        }
        // Handle regular YAML key-value pairs
        else if (yamlData && typeof yamlData === 'object') {
            Object.keys(yamlData).forEach(key => {
                if (key !== 'env') { // Skip the env key if it exists
                    let value = yamlData[key];
                    // Handle nested objects by flattening them
                    if (typeof value === 'object' && value !== null) {
                        flattenObject(value, key).forEach(([flatKey, flatValue]) => {
                            if (typeof flatValue === 'string' && (flatValue.includes(' ') || flatValue.includes('#'))) {
                                flatValue = `"${flatValue}"`;
                            }
                            envContent += `${flatKey}=${flatValue}\n`;
                            variableCount++;
                        });
                    } else {
                        if (typeof value === 'string' && (value.includes(' ') || value.includes('#'))) {
                            value = `"${value}"`;
                        }
                        envContent += `${key}=${value}\n`;
                        variableCount++;
                    }
                }
            });
        }
        
        // Write to .env file
        fs.writeFileSync(outputFile, envContent);
        console.log(`‚úÖ Successfully converted ${inputFile} to ${outputFile}`);
        console.log(`üìä Generated ${variableCount} environment variables`);
        
        if (process.argv.includes('--preview')) {
            console.log(`üìÑ Preview of generated .env content:\n${envContent}`);
        }
        
        return { success: true, variableCount, outputFile };
        
    } catch (error) {
        console.error('‚ùå Error converting YAML to .env:', error.message);
        if (process.argv.includes('--verbose')) {
            console.error(error.stack);
        }
        return { success: false, error: error.message };
    }
}

/**
 * Flatten nested objects into dot notation
 */
function flattenObject(obj, prefix = '') {
    const result = [];
    
    Object.keys(obj).forEach(key => {
        const newKey = prefix ? `${prefix}_${key.toUpperCase()}` : key.toUpperCase();
        
        if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
            result.push(...flattenObject(obj[key], newKey));
        } else {
            result.push([newKey, obj[key]]);
        }
    });
    
    return result;
}

// Command line usage
if (require.main === module) {
    const args = process.argv.slice(2);
    
    // Show help
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üîß YAML to .env Converter Tool

Usage: node convert-yaml-to-env.js <input-yaml-file> [output-env-file] [options]

Options:
  --help, -h          Show this help message
  --preview           Preview the generated .env content
  --verbose           Show detailed error messages
  --watch             Watch for changes and auto-convert
  --backup            Create backup of existing .env file

Examples:
  node convert-yaml-to-env.js secrets.yaml .env
  node convert-yaml-to-env.js secrets.yaml .env --preview
  node convert-yaml-to-env.js secrets.yaml .env --backup
  npm run env:from-yaml
  npm run convert-yaml:watch
        `);
        process.exit(0);
    }
    
    if (args.length < 1) {
        console.log('‚ùå Please provide an input YAML file');
        console.log('Usage: node convert-yaml-to-env.js <input-yaml-file> [output-env-file]');
        console.log('Use --help for more options');
        process.exit(1);
    }
    
    const inputFile = args[0];
    const outputFile = args[1] || '.env.converted';
    
    if (!fs.existsSync(inputFile)) {
        console.error(`‚ùå Input file "${inputFile}" not found`);
        process.exit(1);
    }
    
    // Create backup if requested
    if (args.includes('--backup') && fs.existsSync(outputFile)) {
        const backupFile = `${outputFile}.backup`;
        fs.copyFileSync(outputFile, backupFile);
        console.log(`üì¶ Created backup: ${backupFile}`);
    }
    
    // Watch mode
    if (args.includes('--watch')) {
        console.log(`üëÄ Watching ${inputFile} for changes...`);
        fs.watchFile(inputFile, (curr, prev) => {
            console.log(`üìù File changed, converting...`);
            convertYamlToEnv(inputFile, outputFile);
        });
        // Initial conversion
        convertYamlToEnv(inputFile, outputFile);
        // Keep process running
        process.stdin.resume();
    } else {
        const result = convertYamlToEnv(inputFile, outputFile);
        if (!result.success) {
            process.exit(1);
        }
    }
}

module.exports = { convertYamlToEnv };
