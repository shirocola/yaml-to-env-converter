const fs = require('fs');
const yaml = require('js-yaml');
const path = require('path');

/**
 * Convert .env file to YAML format
 * Supports both flat YAML and nested object structures
 */
function convertEnvToYaml(inputFile, outputFile, options = {}) {
    try {
        // Read the .env file
        const fileContent = fs.readFileSync(inputFile, 'utf8');
        
        const envVars = {};
        let variableCount = 0;
        
        // Parse .env file line by line
        const lines = fileContent.split('\n');
        
        lines.forEach((line, index) => {
            // Skip empty lines and comments
            const trimmedLine = line.trim();
            if (!trimmedLine || trimmedLine.startsWith('#')) {
                return;
            }
            
            // Parse KEY=VALUE format
            const equalIndex = trimmedLine.indexOf('=');
            if (equalIndex === -1) {
                console.warn(`‚ö†Ô∏è  Line ${index + 1}: Invalid format (no '=' found): ${line}`);
                return;
            }
            
            const key = trimmedLine.substring(0, equalIndex).trim();
            let value = trimmedLine.substring(equalIndex + 1).trim();
            
            if (!key) {
                console.warn(`‚ö†Ô∏è  Line ${index + 1}: Empty key: ${line}`);
                return;
            }
            
            // Handle quoted values
            value = parseEnvValue(value);
            
            // Handle nested structure if requested
            if (options.nested && key.includes('_')) {
                setNestedValue(envVars, key, value);
            } else {
                envVars[key] = value;
            }
            
            variableCount++;
        });
        
        // Generate YAML content
        let yamlContent = '';
        
        // Add header comment if requested
        if (options.addHeader !== false) {
            yamlContent += `# Generated from ${inputFile} on ${new Date().toISOString()}\n`;
            yamlContent += `# Auto-generated by convert-env-to-yaml.js\n\n`;
        }
        
        // Convert to YAML - check if K8s array format is requested
        let yamlData;
        if (options.k8sArray) {
            // Convert to Kubernetes-style env array format
            const envArray = [];
            const keys = options.sortKeys ? Object.keys(envVars).sort() : Object.keys(envVars);
            
            keys.forEach(key => {
                envArray.push({
                    name: key,
                    value: String(envVars[key])
                });
            });
            
            yamlData = yaml.dump(envArray, {
                indent: 2,
                lineWidth: -1,
                noRefs: true,
                quotingType: '"',
                forceQuotes: true
            });
        } else {
            // Standard YAML key-value format
            yamlData = yaml.dump(envVars, {
                indent: 2,
                lineWidth: -1,
                noRefs: true,
                sortKeys: options.sortKeys || false
            });
        }
        
        yamlContent += yamlData;
        
        // Write to YAML file
        fs.writeFileSync(outputFile, yamlContent);
        console.log(`‚úÖ Successfully converted ${inputFile} to ${outputFile}`);
        console.log(`üìä Generated ${variableCount} environment variables`);
        
        if (process.argv.includes('--preview')) {
            console.log(`üìÑ Preview of generated YAML content:\n${yamlContent}`);
        }
        
        return { success: true, variableCount, outputFile };
        
    } catch (error) {
        console.error('‚ùå Error converting .env to YAML:', error.message);
        if (process.argv.includes('--verbose')) {
            console.error(error.stack);
        }
        return { success: false, error: error.message };
    }
}

/**
 * Parse environment variable value, handling quotes and type conversion
 */
function parseEnvValue(value) {
    // Handle quoted strings
    if ((value.startsWith('"') && value.endsWith('"')) || 
        (value.startsWith("'") && value.endsWith("'"))) {
        return value.slice(1, -1);
    }
    
    // Convert boolean strings to actual booleans
    if (value.toLowerCase() === 'true') return true;
    if (value.toLowerCase() === 'false') return false;
    
    // Convert numeric strings to numbers
    if (/^\d+$/.test(value)) {
        return parseInt(value, 10);
    }
    if (/^\d+\.\d+$/.test(value)) {
        return parseFloat(value);
    }
    
    return value;
}

/**
 * Set nested value in object using underscore-separated key
 * Example: DATABASE_HOST becomes { database: { host: value } }
 */
function setNestedValue(obj, key, value) {
    const parts = key.toLowerCase().split('_');
    let current = obj;
    
    for (let i = 0; i < parts.length - 1; i++) {
        const part = parts[i];
        if (!(part in current)) {
            current[part] = {};
        }
        current = current[part];
    }
    
    current[parts[parts.length - 1]] = value;
}

// Command line usage
if (require.main === module) {
    const args = process.argv.slice(2);
    
    // Show help
    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
üîß .env to YAML Converter Tool

Usage: node convert-env-to-yaml.js <input-env-file> [output-yaml-file] [options]

Options:
  --help, -h          Show this help message
  --preview           Preview the generated YAML content
  --verbose           Show detailed error messages
  --nested            Convert underscore-separated keys to nested objects
  --sort              Sort keys alphabetically in output
  --no-header         Skip adding header comments
  --k8s-array         Output in Kubernetes-style array format (- name/value pairs)

Examples:
  node convert-env-to-yaml.js .env config.yaml
  node convert-env-to-yaml.js .env config.yaml --preview
  node convert-env-to-yaml.js .env config.yaml --nested --sort
  node convert-env-to-yaml.js .env config.yaml --k8s-array
  npm run env:to-yaml
        `);
        process.exit(0);
    }
    
    if (args.length < 1) {
        console.log('‚ùå Please provide an input .env file');
        console.log('Usage: node convert-env-to-yaml.js <input-env-file> [output-yaml-file]');
        console.log('Use --help for more options');
        process.exit(1);
    }
    
    const inputFile = args[0];
    const outputFile = args[1] || 'config.yaml';
    
    if (!fs.existsSync(inputFile)) {
        console.error(`‚ùå Input file "${inputFile}" not found`);
        process.exit(1);
    }
    
    // Parse options
    const options = {
        nested: args.includes('--nested'),
        sortKeys: args.includes('--sort'),
        addHeader: !args.includes('--no-header'),
        k8sArray: args.includes('--k8s-array')
    };
    
    // Create backup if requested
    if (args.includes('--backup') && fs.existsSync(outputFile)) {
        const backupFile = `${outputFile}.backup`;
        fs.copyFileSync(outputFile, backupFile);
        console.log(`üì¶ Created backup: ${backupFile}`);
    }
    
    const result = convertEnvToYaml(inputFile, outputFile, options);
    if (!result.success) {
        process.exit(1);
    }
}

module.exports = { convertEnvToYaml };